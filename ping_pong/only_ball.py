# подключаем графическую библиотеку
from tkinter import *
# подключаем модули, которые отвечают за время и случайные числа
import time
import random

WIDTH, HEIGHT = 500, 400
# создаём новый объект — окно с игровым полем. В нашем случае переменная окна называется tk, и мы его сделали
# из класса Tk() — он есть в графической библиотеке
tk = Tk()
# делаем заголовок окна — Games с помощью свойства объекта title
tk.title('PingPong')
# запрещаем менять размеры окна, для этого используем свойство resizable
tk.resizable(0, 0)
# создаём новый холст — 400 на 500 пикселей, где и будем рисовать игру
canvas = Canvas(tk, width=WIDTH, height=HEIGHT)
# говорим холсту, что у каждого видимого элемента будут свои отдельные координаты
canvas.pack()
# обновляем окно с холстом
tk.update()


# Описываем класс Ball, который будет отвечать за шарик
class Ball:
    # конструктор — он вызывается в момент создания нового объекта на основе этого класса
    def __init__(self, canvas, color):
        # задаём параметры объекта, которые нам передают в скобках в момент создания
        self.canvas = canvas
        self.speed = 5
        # цвет нужен был для того, чтобы мы им закрасили весь шарик
        # здесь появляется новое свойство ball, в котором хранится внутреннее название шарика
        # а ещё командой create_oval мы создаём круг радиусом 15 пикселей и закрашиваем нужным цветом
        self.ball = canvas.create_oval(10, 10, 25, 25, fill=color)
        # помещаем шарик в точку с координатами 245,100
        self.canvas.move(self.ball, 0, 0)
        # выбираем вектор движения шара
        self.x = random.choice([random.randint(-5, -1), random.randint(1, 5)])
        # в самом начале он всегда падает вниз, поэтому уменьшаем значение по оси y_bird
        self.y = -5
        # свойство, которое отвечает за то, достиг шарик дна или нет. Пока не достиг, значение будет False
        self.hit_bottom = False

    # метод, который отвечает за движение шарика
    def draw(self):
        # передвигаем шарик на заданный вектор x и y_bird
        self.canvas.move(self.ball, self.x, self.y)
        # запоминаем новые координаты шарика
        pos = self.canvas.coords(self.ball)
        # если шарик падает сверху
        if pos[1] <= 0:
            # задаём падение на следующем шаге = 2
            self.y = self.speed
        # если шарик правым нижним углом коснулся дна
        if pos[3] >= HEIGHT:
            # помечаем это в отдельной переменной
            self.y = -self.speed
        # если было касание платформы
        # если коснулись левой стенки
        if pos[0] <= 0:
            # движемся вправо
            self.x = self.speed
        # если коснулись правой стенки
        if pos[2] >= WIDTH:
            # движемся влево
            self.x = -self.speed


# создаём объект — красный шарик
ball = Ball(canvas,  'red')
ball2 = Ball(canvas, 'black')
# пока шарик не коснулся дна
while not ball.hit_bottom:
    # если игра началась и платформа может двигаться

    # двигаем шарик
    ball.draw()
    ball2.draw()

    # обновляем наше игровое поле, чтобы всё, что нужно, закончило рисоваться
    tk.update_idletasks()
    # обновляем игровое поле и смотрим за тем, чтобы всё, что должно было быть сделано — было сделано
    tk.update()
    # замираем на одну сотую секунды, чтобы движение элементов выглядело плавно
    time.sleep(0.01)

tk.mainloop()
